Uses a TCP connection between 2 computers

Messages are GPG encrypted.

The messages are sent and stored on disk in a binary format. The serialising
and disk format is currently the same.

All messages have an ID, which is a hash of the binary PGP message. This is
assumed to be unique, and is used for proof of work calculations.

Limits
------

A node may have time limits or file size limits (Or total disk usage limits)

A proof of work must be used for all messages.

The proof of work is a number, x, that is incremented until the hash of

    x+id

starts with at least some number 0 bytes. Both x and the id are represented as
bytes, not in hex.

The number required depends on the node. Recommended value is 3, but 2 is being
used for now.

Syncing
-------

Nodes connect to other nodes. A node doesn't technically have to be port
forwarded, but the server (the one getting a connection) must be.

Not all nodes need to know other nodes. Every once in a while, depending on the
configuration, a node will sync itself with one other node. The delay should be
randomised, and shouldn't be too low.

All data transmitted is encoded in ASCII or is a big-endian number

A = Client
B = Server

A -> B
Client's protocol version

B -> A
Server's protocol version

The protocol version is a number that is changed when further changes to the protocol would
break backwards compatibility.

The version number must be padded to 16 bytes. Clients should delete null bytes
when displaying the version number.

If the server sees a protocol version that is not the same as it's own, it may just kill the
connection without sending anything more. The version numbers don't need to increase, the program
makes no attempt at backwards compatibility right now.


A -> B
Amount of ID's that is going to be sent, represented as a 2 byte integer (big-endian)
This allows the server to expect exactly how many recv calls it needs to use.

A -> B
List of known ID's. Since the ID's are fixed length, they may be sent with no
formatting, the client can recieve them in 64 byte chunks (256 bit hex).

B -> A
See above. Send list of known ID's, only reversing A and B.


Now both clients make a list of what messages they need to send to each other
to be fully synced.

A -> B

All needed messages encoded in a binary format. The format is

    msgid: The message's ID
    proof: Message's proof as a 8 byte big endian number
    gpg: The actual message in GPG's binary format (not using ascii armor)


B -> A
See above.

Both clients now have the same messages, and may disconnect.

Bugs/General TODO:

No protection against other nodes that take too long. This will hang the node
until one of them disconnects. To fix this, set a timeout and just kill the
connection if it is reached. (And possibly not connect to that node for a few
weeks)
